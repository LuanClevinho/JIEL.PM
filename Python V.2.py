# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S0ubCALRjgoOCVeE9n-S25iNda_FfTHo
"""

import pandas as pd
import os
import chardet
from google.colab import files

# Função para ler arquivos CSV com tratamento de erro
def read_csv(file_path):
    try:
        with open(file_path, 'rb') as f:
            result = chardet.detect(f.read())
            encoding = result['encoding']
            return pd.read_csv(file_path, sep=',', decimal='.', encoding=encoding)
    except FileNotFoundError:
        print(f"Arquivo não encontrado: {file_path}")
        return None

# Carregar arquivos do sistema local para o ambiente do Colab
uploaded = files.upload()

# Verificar os nomes dos arquivos que foram carregados
file_rotas = [key for key in uploaded.keys() if 'Rotas.csv' in key][0]
file_clientes = [key for key in uploaded.keys() if 'Clientes.csv' in key][0]
file_fabricas = [key for key in uploaded.keys() if 'Fabricas.csv' in key][0]

# Abre os arquivos necessários
df_rotas = read_csv(file_rotas)
df_clientes = read_csv(file_clientes)
df_fabricas = read_csv(file_fabricas)

# Verifica se os DataFrames foram carregados corretamente
if df_rotas is not None and df_clientes is not None and df_fabricas is not None:
    # Corrigir latitudes e longitudes se necessário
    # Por exemplo, supondo que as latitudes e longitudes estão em colunas 'Latitude' e 'Longitude' em todos os DataFrames:
    # df_rotas['Latitude'] = df_rotas['Latitude'].astype(float)
    # df_rotas['Longitude'] = df_rotas['Longitude'].astype(float)
    # df_clientes['Latitude'] = df_clientes['Latitude'].astype(float)
    # df_clientes['Longitude'] = df_clientes['Longitude'].astype(float)
    # df_fabricas['Latitude'] = df_fabricas['Latitude'].astype(float)
    # df_fabricas['Longitude'] = df_fabricas['Longitude'].astype(float)

    # Checagem dos arquivos
    print("Informações sobre o arquivo de rotas:")
    print(df_rotas.info())
    print("\nInformações sobre o arquivo de clientes:")
    print(df_clientes.info())
    print("\nInformações sobre o arquivo de fábricas:")
    print(df_fabricas.info())

    # Integra os DataFrames de Rotas, Clientes e Fábricas
    rotas_final = df_rotas.merge(df_clientes, left_on='CO.Cliente', right_on='CO.Cliente', how='inner') \
                           .merge(df_fabricas, left_on='CO.Fabrica', right_on='CO.Fabrica', how='inner')

    # Checagem do DataFrame final
    print("\nInformações sobre o DataFrame final:")
    print(rotas_final.info())

    # Visualização do DataFrame final
    print("\nCinco primeiras linhas do DataFrame final:")
    print(rotas_final.head(5))

    # Criação de nova coluna com condição
    rotas_final['Capacidade'] = None
    rotas_final.loc[rotas_final['Veiculo'] == 'P24', 'Capacidade'] = 3600
    rotas_final.loc[rotas_final['Veiculo'] == 'P12', 'Capacidade'] = 1800

    # Criação de nova coluna com cálculo
    rotas_final['Produtividade'] = rotas_final['Qtd.Transp'] / rotas_final['Capacidade'] * 100

    # Exportação dos DataFrames para arquivos de texto
    rotas_final.to_csv('Rotas_final.txt', sep='\t', index=False)
    df_clientes.to_csv('Clientes.txt', sep='\t', index=False)
    df_fabricas.to_csv('Fabricas.txt', sep='\t', index=False)

    print("\nArquivos TXT criados com sucesso!")
else:
    print("\nErro ao carregar arquivos. Verifique os caminhos e tente novamente.")

# Baixando os arquivos para o seu sistema local
files.download('Rotas_final.txt')
files.download('Clientes.txt')
files.download('Fabricas.txt')